<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>λ on E-Meow Site</title>
    <link>https://ash-z01.github.io/tags/%CE%BB/</link>
    <description>Recent content in λ on E-Meow Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Nov 2020 15:57:10 +0800</lastBuildDate>
    
	<atom:link href="https://ash-z01.github.io/tags/%CE%BB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Recursion of Lambda-Calculus</title>
      <link>https://ash-z01.github.io/2020/recursion/</link>
      <pubDate>Mon, 23 Nov 2020 15:57:10 +0800</pubDate>
      
      <guid>https://ash-z01.github.io/2020/recursion/</guid>
      <description>从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？“从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？‘从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？……’”
 0x01 不动点 定义函数 𝑓:ℝ↦ℝ，如果 ∃𝑥∈𝐷(𝑓)，使得 𝑥=𝑓(𝑥)，则称点 𝑥 是函数 𝑓(𝑥) 的不动点.
// 等式 x = f(x) 可以进行如下的无穷变换 x = f(x) = f(f(x)) = f(f(f(x))) = ... 0x02 递归  递归的强大之处在于它允许用户用有限的语句描述无限的对象! 瑞士的计算机科学家 尼克劳斯·维尔特 如是说..
 考虑一下 阶乘函数 fact 的定义:
fact n = 1 if n == 0 else (n * fact (n-1)) // 尝试进行 lambda 抽象 [忽略表达式的细节] let zero? = lambda n x y . if-then-else (n == 0) x y let pred = lambda x .</description>
    </item>
    
    <item>
      <title>Bool and Condition of Lambda-Calculus</title>
      <link>https://ash-z01.github.io/2020/boolandcondition/</link>
      <pubDate>Fri, 20 Nov 2020 12:12:10 +0800</pubDate>
      
      <guid>https://ash-z01.github.io/2020/boolandcondition/</guid>
      <description>我想寻求这样一张特殊的字母表，其元素表示的不是声音而是概念。有了这样一个符号系统，我们就可以发展出一种语言， 我们仅凭符号演算，就可以确定用这种语言写成的哪些句子为真，以及它们之间存在着什么样的逻辑关系. &amp;mdash;&amp;mdash;&amp;mdash; 莱布尼茨的愿望
 0x01 函数化的布尔值 在计算机编程语言中，为了达到条件判断，大都会引入 if-then-else 这类条件分支语言，像这样~
if n == 1 then ... else ... end 为了实现条件真假判断，先得看看lambda演算中的布尔值和逻辑运算.(带上点语法糖，看起来更有味儿)
let TRUE = lambda x y . x let FALSE = lambda x y . y 嘛~ 现在貌似还看不出 TRUE 和 FALSE 的lambda表达式的用意.. 再看看逻辑运算符吧
let And = lambda x y . x y FALSE let Or = lambda x y . x TRUE y let Not = lambda x . x FALSE TRUE 咦~ 什么乱起八糟的，果然只有动动手，才能加深理解了.</description>
    </item>
    
    <item>
      <title>Number of Lambda-Calculus</title>
      <link>https://ash-z01.github.io/2020/number/</link>
      <pubDate>Thu, 19 Nov 2020 11:40:10 +0800</pubDate>
      
      <guid>https://ash-z01.github.io/2020/number/</guid>
      <description>万物皆数，数是宇宙的根本，找到数就找到了宇宙的本原. &amp;mdash;&amp;mdash;&amp;mdash; 毕达哥拉斯
 0x01 函数化的数字 1 &amp;lt;- 这是什么数? | 数字 1 呀 2 &amp;lt;- 那这个呢？ | 数字 2 呗 1 + 2 &amp;lt;- 这个的结果呢 | 数字 3 吧 小伙伴(😡): ???当我三岁小孩呢~
上面的示例中, 使用了数字和算术运算. 但数字并不真正存在于lambda演算中，我们有的只有函数! 我们得想个法子用函数来表示数字. 那么往下看..
`lambda f x . x` &amp;lt;- 那么这是啥呢~ , 我们假设它就是 0 `lambda f x . f x` 假定这个就是 1 `lambda f x . f (f x)` 假定这个就是 2 , `lambda f x . f (f (f x))` 那么 3 呢， `lambda f x .</description>
    </item>
    
    <item>
      <title>Essential of Lambda-Calculus</title>
      <link>https://ash-z01.github.io/2020/essential/</link>
      <pubDate>Wed, 18 Nov 2020 17:10:10 +0800</pubDate>
      
      <guid>https://ash-z01.github.io/2020/essential/</guid>
      <description>法国作家、冒险家、艺术家和航空工程师 安东尼·德·圣埃克苏佩里 (Antoine de Saint-Exupéry) 在论飞机设计时说： “La perfection est atteinte non quand il ne reste rien à ajouter，mais quand il ne reste rien à enlever!” 完美之道，不在无可增加，而在无可删减!
 0x01 什么是 lambda-calculus λ-演算(lambda/λ-calculus)是一套从数学逻辑中发展，以变量绑定和替换的规则，来研究函数如何抽象化定义、函数如何被应用以及递归的形式系统.
20世纪30年代，一个名叫阿隆佐-邱奇的数学家,首次发表了Lambda演算， 从而解决了可计算理论中的判定性问题. lambda演算作为一种广泛用途的计算模型，可以清晰地定义什么是一个可计算函数，而任何可计算函数都能以这种形式表达和求值. 𝜆-演算 分为 `类型化𝜆-演算(Typed λ-Calculus)` 和 `无类型𝜆-演算(Type-Free λ-Calculus)` 也称为 `朴素λ-演算(Naive λ-Calculs)`. lambda演算简单易读写，语义强大同时图灵完备, 后续内容主要针对是无类型的λ-演算展开讲解.
0x02 一切皆函数 大家都学过不少编程语言, C++、Java、Go、Python等&amp;hellip; 它们大部分都有着丰富的语法特性，很多特性可以互相替换。 如果我们遵循安东尼的完美之道，去裁剪语法，那么最小化的语言是什么样的呢~
lambda演算可比拟最根本的编程语言, 它的内核非常小,可以用以下规则来描述:
   语法/L-exp 名称 描述     a 变量/原子 标识符引用就是一个名字，这个名字用于匹配函数表达式中的某个参数名   λx.</description>
    </item>
    
  </channel>
</rss>